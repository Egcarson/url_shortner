from pydantic import BaseModel, field_validator, AnyHttpUrl, Field
from typing import Optional, List
from datetime import datetime


class UserBase(BaseModel):
    first_name: str
    last_name: str
    username: str
    email_address: str

class UserCreate(UserBase):
    hashed_password: str

    @field_validator('hashed_password')
    def validate_password(cls, value):  # 'cls' is the class UserSignup itself
        if len(value) < 8:
            raise ValueError('Password must be at least 8 characters long')
        if not any(char.isdigit() for char in value):
            raise ValueError('Password must contain at least one digit')
        if not any(char.islower() for char in value):
            raise ValueError('Password must contain at least one lowercase letter')
        if not any(char.isupper() for char in value):
            raise ValueError('Password must contain at least one uppercase letter')
        if not any(char in "!@#$%^&*()_+[]{}|;:,.<>?/~" for char in value):
            raise ValueError('Password must contain at least one special character')
        return value

class UserUpdate(BaseModel):
    first_name: str
    last_name: str
    username: str

class User(UserBase):
    id: int
    created_at: datetime

    class ConfigDict:
        from_attributes=True


class URLBase(BaseModel):
    original_url: AnyHttpUrl
    short_code: Optional[str] = Field(default=None, min_length=3, max_length=20, description="Shortcode (can also be autogenerated)")

class URLCreate(URLBase):
    pass

class URLRead(URLBase):
    id: int
    user_id: int
    created_at: datetime
    click_count: int
    is_active: bool = True
    expires_at: Optional[datetime] = None

    class ConfigDict:
        from_attributes = True

class LoginData(BaseModel):
    username: str
    password: str